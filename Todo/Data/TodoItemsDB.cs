//Sally: Added 9 April,2019  using System.Collections.Generic; using System.Threading.Tasks; using SQLite;  namespace Todo {     //Creating a new class contains code to create the database, read, write, and delete data from it using asynchronous SQLite.NET APIs     public class TodoItemsDB    {         //Defining SQLite Database object         readonly SQLiteAsyncConnection database;        public TodoItemsDB(string dbPath)      {
            //A database reference can be created by passing the file path the SQLiteConnection class constructor, the file will automatically be created if required, otherwise the existing database file will be opened.
            database = new SQLiteAsyncConnection(dbPath);             //Creating new table "TodoItem" in the new SQLite Database             database.CreateTableAsync<ItemsEntity>().Wait();      }          //Function returns a list of all Todo Items        public Task<List<ItemsEntity>> GetItemsAsync()        {           return database.Table<ItemsEntity>().ToListAsync();        }          //Function returns a list of all Todo Items which are DONE!         public Task<List<ItemsEntity>> GetItemsNotDoneAsync()        {           return database.QueryAsync<ItemsEntity>("SELECT * FROM [TodoItem] WHERE [Done] = 0");        }          //Function returns the current Todo Items, given its ID         public Task<ItemsEntity> GetItemAsync(int id)         {           return database.Table<ItemsEntity>().Where(i => i.ID == id).FirstOrDefaultAsync();         }          //Function saves a new Todo Item or Update an existant one and returns its ID         public Task<int> SaveItemAsync(ItemsEntity item)      {           if (item.ID != 0)           {               return database.UpdateAsync(item);           }           else            {              return database.InsertAsync(item);           }       }          //Function deletes Todo Item and returns its ID         public Task<int> DeleteItemAsync(ItemsEntity item)      {           return database.DeleteAsync(item);      }   } }